
        // –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è Telegram –±–æ—Ç–∞
        const TELEGRAM_CONFIG = {
            botToken: '7972648152:AAEkEvxuTv4wrX0LEQkNhzSr7RRdRilA4-I', // –ó–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–æ–≥–æ –±–æ—Ç–∞
            chatId: '-1002699091130'      // –ó–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ ID –≤–∞—à–æ—ó –≥—Ä—É–ø–∏
        };

        // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–∫–∞–∑—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        function showNotification(message, type = 'success') {
            const notification = document.createElement('div');
            notification.className = `notification ${type}`;
            notification.textContent = message;
            document.body.appendChild(notification);
            
            // –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            setTimeout(() => notification.classList.add('show'), 100);
            
            // –ü—Ä–∏—Ö–æ–≤–∞—Ç–∏ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥–∏
            setTimeout(() => {
                notification.classList.remove('show');
                setTimeout(() => document.body.removeChild(notification), 300);
            }, 3000);
        }

        // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Telegram
        async function sendToTelegram(formData) {
            try {
                const message = formatMessage(formData);
                
                const response = await fetch(`https://api.telegram.org/bot${TELEGRAM_CONFIG.botToken}/sendMessage`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        chat_id: TELEGRAM_CONFIG.chatId,
                        text: message,
                        parse_mode: 'HTML',
                        disable_web_page_preview: true
                    })
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const result = await response.json();
                return result.ok;
            } catch (error) {
                console.error('–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', error);
                return false;
            }
        }

        // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è UTM –º—ñ—Ç–æ–∫ –∑ URL
        function getUTMParams() {
            const urlParams = new URLSearchParams(window.location.search);
            const utmParams = {};
            
            // –°–ø–∏—Å–æ–∫ –º–æ–∂–ª–∏–≤–∏—Ö UTM –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
            const utmKeys = [
                'utm_source', 'utm_medium', 'utm_campaign', 
                'utm_term', 'utm_content', 'utm_id'
            ];
            
            utmKeys.forEach(key => {
                const value = urlParams.get(key);
                if (value) {
                    utmParams[key] = value;
                }
            });
            
            return utmParams;
        }

        // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        function formatMessage(formData) {
            const currentTime = new Date().toLocaleString('uk-UA');
            const utmParams = getUTMParams();
            
            let message = `üîî <b>–ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –∑ —Å–∞–π—Ç—É</b>\n`;
            message += `üìÖ <b>–î–∞—Ç–∞:</b> ${currentTime}\n\n`;
            
            if (formData.name) {
                message += `üë§ <b>–Ü–º'—è:</b> ${formData.name}\n`;
            }
            
            if (formData.phone) {
                message += `üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${formData.phone}\n`;
            }
            
            if (formData.field) {
                message += `üìù <b>–î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:</b> ${formData.field}\n`;
            }
            
            message += `\nüåê <b>–°—Ç–æ—Ä—ñ–Ω–∫–∞:</b> ${window.location.href}`;
            
            // –î–æ–¥–∞—î–º–æ UTM –º—ñ—Ç–∫–∏ —è–∫—â–æ –≤–æ–Ω–∏ —î
            if (Object.keys(utmParams).length > 0) {
                message += `\n\nüìä <b>UTM –º—ñ—Ç–∫–∏:</b>\n`;
                
                Object.entries(utmParams).forEach(([key, value]) => {
                    const displayName = key.replace('utm_', '').replace('_', ' ');
                    message += `‚Ä¢ <b>${displayName}:</b> ${value}\n`;
                });
            }
            
            return message;
        }

        // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–±–æ—Ä—É –¥–∞–Ω–∏—Ö –∑ —Ñ–æ—Ä–º–∏
        function collectFormData(form) {
            const formData = {};
            
            // –ó–±–∏—Ä–∞—î–º–æ –¥–∞–Ω—ñ –∑ –ø–æ–ª—ñ–≤
            const nameField = form.querySelector('#name');
            const phoneField = form.querySelector('#Phone-2');
            const fieldField = form.querySelector('#field');
            
            if (nameField && nameField.value.trim()) {
                formData.name = nameField.value.trim();
            }
            
            if (phoneField && phoneField.value.trim()) {
                formData.phone = phoneField.value.trim();
            }
            
            if (fieldField && fieldField.value.trim()) {
                formData.field = fieldField.value.trim();
            }
            
            return formData;
        }

        // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó —Ñ–æ—Ä–º–∏
        function validateForm(formData) {
            // –°–ø—Ä–æ—â–µ–Ω–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è - –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç—ñ–ª—å–∫–∏ –æ—Å–Ω–æ–≤–Ω—ñ –ø–æ–ª—è
            // Webflow —Å–∞–º –≤–∞–ª—ñ–¥—É—î –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è
            if (!formData.name && !formData.phone) {
                return false; // –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏
            }
            
            return true;
        }

        // –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –æ–±—Ä–æ–±–∫–∏ —Ñ–æ—Ä–º–∏
        async function handleFormSubmit(event) {
            const form = event.target.closest('form');
            if (!form) return;
            
            const submitButton = form.querySelector('#button_form');
            
            try {
                // –ó–±–∏—Ä–∞—î–º–æ –¥–∞–Ω—ñ
                const formData = collectFormData(form);
                
                // –í–∞–ª—ñ–¥—É—î–º–æ –¥–∞–Ω—ñ
                if (!validateForm(formData)) {
                    event.preventDefault(); // –ó—É–ø–∏–Ω—è—î–º–æ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è –Ω–µ –ø—Ä–æ–π—à–ª–∞
                    return;
                }
                
                // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤ Telegram –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ –∑ Webflow
                sendToTelegram(formData).then(success => {
                    if (success) {
                        console.log('‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram');
                    } else {
                        console.log('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤ Telegram');
                    }
                });
                
                // –î–æ–∑–≤–æ–ª—è—î–º–æ Webflow –æ–±—Ä–æ–±–∏—Ç–∏ —Ñ–æ—Ä–º—É —è–∫ –∑–∞–∑–≤–∏—á–∞–π
                // event.preventDefault() –Ω–µ –≤–∏–∫–ª–∏–∫–∞—î–º–æ, —Ç–æ–º—É Webflow –ø—Ä–æ–¥–æ–≤–∂–∏—Ç—å —Ä–æ–±–æ—Ç—É
                
            } catch (error) {
                console.error('–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Ñ–æ—Ä–º–∏:', error);
                // –ù–∞–≤—ñ—Ç—å –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ –¥–æ–∑–≤–æ–ª—è—î–º–æ Webflow –ø—Ä–∞—Ü—é–≤–∞—Ç–∏
            }
        }

        // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏
        document.addEventListener('DOMContentLoaded', function() {
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é
            if (TELEGRAM_CONFIG.botToken === 'YOUR_BOT_TOKEN' || TELEGRAM_CONFIG.chatId === 'YOUR_CHAT_ID') {
                console.warn('‚ö†Ô∏è –£–≤–∞–≥–∞: –ü–æ—Ç—Ä—ñ–±–Ω–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ TELEGRAM_CONFIG –∑ –≤–∞—à–∏–º–∏ –¥–∞–Ω–∏–º–∏!');
            }
            
            // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—Å—ñ —Ñ–æ—Ä–º–∏ –∑ id="wf-form"
            const forms = document.querySelectorAll('form[id="wf-form"]');
            
            forms.forEach(form => {
                // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –Ω–∞ submit —Ñ–æ—Ä–º–∏ (–Ω–µ –Ω–∞ –∫–Ω–æ–ø–∫—É)
                // –¶–µ –¥–æ–∑–≤–æ–ª–∏—Ç—å Webflow –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ —è–∫ –∑–∞–∑–≤–∏—á–∞–π
                form.addEventListener('submit', handleFormSubmit);
                
                console.log('‚úÖ –§–æ—Ä–º–∞ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∞ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤ Telegram (+ Webflow)');
            });
        });

        // –î–æ–¥–∞—Ç–∫–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        window.TelegramFormSender = {
            // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–º—ñ–Ω–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
            setConfig: function(botToken, chatId) {
                TELEGRAM_CONFIG.botToken = botToken;
                TELEGRAM_CONFIG.chatId = chatId;
            },
            
            // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
            test: function() {
                const testData = {
                    name: '–¢–µ—Å—Ç',
                    phone: '+380123456789',
                    field: '–¢–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è'
                };
                
                sendToTelegram(testData).then(success => {
                    if (success) {
                        console.log('‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π—à–æ–≤ —É—Å–ø—ñ—à–Ω–æ!');
                    } else {
                        console.log('‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é.');
                    }
                });
            }
        };
    
