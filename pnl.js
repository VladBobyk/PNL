// –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è Telegram –±–æ—Ç–∞
const TELEGRAM_CONFIG = {
    botToken: '7972648152:AAEkEvxuTv4wrX0LEQkNhzSr7RRdRilA4-I',
    chatId: '-1002699091130',
    threads: {
        'trial_lesson': 1809,
        'general': null
    }
};

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Safari/iOS
const isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;
const isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);

console.log('üì± Device:', { isIOS, isSafari });

// –ü—Ä–æ—Å—Ç–∏–π –∑–±—ñ—Ä –¥–∞–Ω–∏—Ö
function collectFormData(form) {
    const formData = {};
    
    const nameField = form.querySelector('#name, input[name="name"], input[type="text"]');
    const phoneField = form.querySelector('#Phone-2, #phone, input[name="phone"], input[type="tel"]');
    const fieldField = form.querySelector('#field, textarea, input[name="message"]');
    
    if (nameField) formData.name = nameField.value.trim();
    if (phoneField) formData.phone = phoneField.value.trim();
    if (fieldField) formData.field = fieldField.value.trim();
    
    // –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø —Ñ–æ—Ä–º–∏
    if (form.id === 'wf-form-free' || form.classList.contains('forma-free')) {
        formData.formType = 'trial';
    } else {
        formData.formType = 'general';
    }
    
    return formData;
}

// –°–ø—Ä–æ—â–µ–Ω–µ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
function formatMessage(formData) {
    const currentTime = new Date().toLocaleString('uk-UA');
    let message = `üîî –ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –∑ —Å–∞–π—Ç—É\n`;
    message += `üìÖ –î–∞—Ç–∞: ${currentTime}\n\n`;
    
    if (formData.name) message += `üë§ –Ü–º'—è: ${formData.name}\n`;
    if (formData.phone) message += `üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${formData.phone}\n`;
    if (formData.field) message += `üìù –Ü–Ω—Ñ–æ: ${formData.field}\n`;
    message += `\nüåê –°—Ç–æ—Ä—ñ–Ω–∫–∞: ${window.location.href}`;
    
    return message;
}

// –ö–†–ò–¢–ò–ß–ù–û: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ sendBeacon –¥–ª—è Safari
function sendToTelegramBeacon(formData, threadId) {
    try {
        const message = formatMessage(formData);
        const url = `https://api.telegram.org/bot${TELEGRAM_CONFIG.botToken}/sendMessage`;
        
        const data = {
            chat_id: TELEGRAM_CONFIG.chatId,
            text: message,
            parse_mode: 'HTML'
        };
        
        if (threadId) {
            data.message_thread_id = threadId;
        }
        
        // –î–ª—è Safari/iOS –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ sendBeacon
        if (navigator.sendBeacon) {
            const blob = new Blob([JSON.stringify(data)], { type: 'application/json' });
            navigator.sendBeacon(url, blob);
            console.log('üì§ Sent via sendBeacon');
        } else {
            // Fallback - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ fetch –∞–ª–µ –ù–ï —á–µ–∫–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
            fetch(url, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(data),
                keepalive: true // –í–∞–∂–ª–∏–≤–æ –¥–ª—è Safari!
            }).catch(() => {});
            console.log('üì§ Sent via fetch');
        }
    } catch (error) {
        console.error('Error:', error);
    }
}

// –ì–û–õ–û–í–ù–ï: –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–µ –≤—Ç—Ä—É—á–∞–Ω–Ω—è –≤ —Ä–æ–±–æ—Ç—É —Ñ–æ—Ä–º–∏
function setupForm(form) {
    // –ù–ï –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ preventDefault!
    // –ü—Ä–æ—Å—Ç–æ —Å–ª—É—Ö–∞—î–º–æ –ø–æ–¥—ñ—é —ñ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –¥–∞–Ω—ñ –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ
    
    form.addEventListener('submit', function(e) {
        // –ù–ï –±–ª–æ–∫—É—î–º–æ —Ñ–æ—Ä–º—É!
        // –ü—Ä–æ—Å—Ç–æ –∑–±–∏—Ä–∞—î–º–æ –¥–∞–Ω—ñ —ñ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤ —Ñ–æ–Ω—ñ
        
        try {
            const formData = collectFormData(form);
            
            // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —î –¥–∞–Ω—ñ
            if (!formData.name && !formData.phone) {
                return; // –ù—ñ—á–æ–≥–æ –Ω–µ —Ä–æ–±–∏–º–æ, –¥–∞—î–º–æ Webflow –ø—Ä–∞—Ü—é–≤–∞—Ç–∏
            }
            
            // –í–∏–∑–Ω–∞—á–∞—î–º–æ thread
            const threadId = (form.id === 'wf-form-free' || form.classList.contains('forma-free')) 
                ? TELEGRAM_CONFIG.threads.trial_lesson 
                : TELEGRAM_CONFIG.threads.general;
            
            // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —á–µ—Ä–µ–∑ beacon (–Ω–µ –±–ª–æ–∫—É—î —Ñ–æ—Ä–º—É!)
            sendToTelegramBeacon(formData, threadId);
            
        } catch (error) {
            console.error('Error in form handler:', error);
            // –ü—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ - –Ω—ñ—á–æ–≥–æ –Ω–µ —Ä–æ–±–∏–º–æ, –¥–∞—î–º–æ —Ñ–æ—Ä–º—ñ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏
        }
        
        // –§–æ—Ä–º–∞ –ø—Ä–æ–¥–æ–≤–∂—É—î –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –Ω–æ—Ä–º–∞–ª—å–Ω–æ!
    }, false); // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ bubble phase
}

// –í–ê–†–Ü–ê–ù–¢ 2: –Ø–∫—â–æ –ø–µ—Ä—à–∏–π –Ω–µ –ø—Ä–∞—Ü—é—î, —Å–ø—Ä–æ–±—É–π—Ç–µ —Ü–µ–π
function setupFormAlternative(form) {
    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ Webflow –ø–æ–¥—ñ—ó —è–∫—â–æ –≤–æ–Ω–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ
    if (window.Webflow && window.$) {
        const $form = $(form);
        
        // –°–ª—É—Ö–∞—î–º–æ —É—Å–ø—ñ—à–Ω—É –≤—ñ–¥–ø—Ä–∞–≤–∫—É Webflow —Ñ–æ—Ä–º–∏
        $form.on('submit', function() {
            try {
                const formData = collectFormData(form);
                if (formData.name || formData.phone) {
                    const threadId = (form.id === 'wf-form-free') 
                        ? TELEGRAM_CONFIG.threads.trial_lesson 
                        : TELEGRAM_CONFIG.threads.general;
                    sendToTelegramBeacon(formData, threadId);
                }
            } catch (error) {
                console.error('Error:', error);
            }
        });
        
        console.log('‚úÖ Form setup via jQuery');
    }
}

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
document.addEventListener('DOMContentLoaded', function() {
    console.log('üöÄ Telegram Form Sender Init (Safari-optimized)');
    
    // –ß–µ–∫–∞—î–º–æ –Ω–∞ Webflow
    if (window.Webflow) {
        window.Webflow.push(function() {
            console.log('üì¶ Webflow ready');
            initForms();
        });
    } else {
        // –Ø–∫—â–æ Webflow –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –æ–¥—Ä–∞–∑—É
        setTimeout(initForms, 100);
    }
});

function initForms() {
    const forms = document.querySelectorAll('form');
    console.log(`üìã Found ${forms.length} forms`);
    
    forms.forEach((form, index) => {
        console.log(`Setting up form ${index}: ${form.id || 'no-id'}`);
        
        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø—Ä–æ—Å—Ç–∏–π –º–µ—Ç–æ–¥
        setupForm(form);
        
        // –Ø–∫—â–æ —î jQuery - –¥–æ–¥–∞—î–º–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π –º–µ—Ç–æ–¥
        if (window.$) {
            setupFormAlternative(form);
        }
    });
    
    // –î–æ–¥–∞—Ç–∫–æ–≤–∏–π —Ö–∞–∫ –¥–ª—è Safari –Ω–∞ iOS
    if (isIOS && isSafari) {
        console.log('üîß iOS Safari detected - applying additional fixes');
        
        forms.forEach(form => {
            // –î–æ–¥–∞—î–º–æ –ø—Ä–∏—Ö–æ–≤–∞–Ω–∏–π iframe –¥–ª—è Safari
            const iframe = document.createElement('iframe');
            iframe.name = 'hidden_iframe_' + Math.random();
            iframe.style.display = 'none';
            document.body.appendChild(iframe);
            
            // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ target –Ω–∞ —Ñ–æ—Ä–º—É (–¥–æ–ø–æ–º–∞–≥–∞—î –∑ —Ä–µ–¥—ñ—Ä–µ–∫—Ç–æ–º –≤ Safari)
            if (!form.target) {
                form.target = iframe.name;
                
                // –ü—ñ—Å–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º–∏ - —Ä–æ–±–∏–º–æ —Ä–µ–¥—ñ—Ä–µ–∫—Ç –≤—Ä—É—á–Ω—É
                iframe.onload = function() {
                    const redirectUrl = form.getAttribute('data-redirect') || 
                                      form.getAttribute('redirect');
                    if (redirectUrl) {
                        console.log('Manual redirect to:', redirectUrl);
                        window.location.href = redirectUrl;
                    }
                };
            }
        });
    }
}

// –ü—Ä–æ—Å—Ç–∏–π debug helper
window.FormDebug = {
    check: function() {
        document.querySelectorAll('form').forEach((form, i) => {
            console.log(`Form ${i}:`, {
                id: form.id,
                action: form.action,
                redirect: form.getAttribute('data-redirect'),
                target: form.target
            });
        });
    },
    
    testBeacon: function() {
        if (navigator.sendBeacon) {
            console.log('‚úÖ sendBeacon supported');
            const testData = { test: true };
            const blob = new Blob([JSON.stringify(testData)], { type: 'application/json' });
            const result = navigator.sendBeacon('/test', blob);
            console.log('Test beacon sent:', result);
        } else {
            console.log('‚ùå sendBeacon NOT supported');
        }
    }
};

console.log('üí° Run FormDebug.check() to see all forms');
console.log('üí° Run FormDebug.testBeacon() to test beacon API');
