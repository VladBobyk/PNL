// –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è Telegram –±–æ—Ç–∞
const TELEGRAM_CONFIG = {
    botToken: '7972648152:AAEkEvxuTv4wrX0LEQkNhzSr7RRdRilA4-I',
    chatId: '-1002699091130',
    threads: {
        'trial_lesson': 1809,
        'general': null
    }
};

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–∫–∞–∑—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
function showNotification(message, type = 'success') {
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    notification.textContent = message;
    document.body.appendChild(notification);
    
    setTimeout(() => notification.classList.add('show'), 100);
    
    setTimeout(() => {
        notification.classList.remove('show');
        setTimeout(() => document.body.removeChild(notification), 300);
    }, 3000);
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –≤ —è–∫—É –≥—ñ–ª–∫—É –≤—ñ–¥–ø—Ä–∞–≤–ª—è—Ç–∏
function getThreadId(form) {
    const formId = form.id;
    console.log('Form ID:', formId);
    
    if (formId === 'wf-form-free' ||
        form.classList.contains('forma-free') ||
        form.classList.contains('wf-form-free') ||
        form.dataset.formType === 'free' ||
        form.dataset.formType === 'trial') {
        console.log('–í–∏–∑–Ω–∞—á–µ–Ω–æ —Ñ–æ—Ä–º—É –ø—Ä–æ–±–Ω–æ–≥–æ —É—Ä–æ–∫—É');
        return TELEGRAM_CONFIG.threads.trial_lesson;
    }
    
    console.log('–í–∏–∑–Ω–∞—á–µ–Ω–æ –∑–∞–≥–∞–ª—å–Ω—É —Ñ–æ—Ä–º—É');
    return TELEGRAM_CONFIG.threads.general;
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Telegram
async function sendToTelegram(formData, threadId) {
    try {
        const message = formatMessage(formData);
        
        const payload = {
            chat_id: TELEGRAM_CONFIG.chatId,
            text: message,
            parse_mode: 'HTML',
            disable_web_page_preview: true
        };

        if (threadId !== null && threadId !== undefined) {
            payload.message_thread_id = threadId;
        }
        
        const response = await fetch(`https://api.telegram.org/bot${TELEGRAM_CONFIG.botToken}/sendMessage`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(payload)
        });

        const result = await response.json();
        
        if (!response.ok) {
            console.error('Telegram API error:', result);
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        console.log('–í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ Telegram:', result);
        return result.ok;
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', error);
        return false;
    }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è UTM –º—ñ—Ç–æ–∫ –∑ URL
function getUTMParams() {
    const urlParams = new URLSearchParams(window.location.search);
    const utmParams = {};
    
    const utmKeys = [
        'utm_source', 'utm_medium', 'utm_campaign', 
        'utm_term', 'utm_content', 'utm_id'
    ];
    
    utmKeys.forEach(key => {
        const value = urlParams.get(key);
        if (value) {
            utmParams[key] = value;
        }
    });
    
    return utmParams;
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
function formatMessage(formData) {
    const currentTime = new Date().toLocaleString('uk-UA');
    const utmParams = getUTMParams();
    
    let message = `üîî <b>–ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –∑ —Å–∞–π—Ç—É</b>\n`;
    message += `üìÖ <b>–î–∞—Ç–∞:</b> ${currentTime}\n`;
    
    if (formData.formType) {
        const typeEmoji = formData.formType === 'trial' ? 'üéì' : 'üìã';
        const typeName = formData.formType === 'trial' ? '–ü—Ä–æ–±–Ω–∏–π —É—Ä–æ–∫' : '–ó–∞–≥–∞–ª—å–Ω–∞ –∑–∞—è–≤–∫–∞';
        message += `${typeEmoji} <b>–¢–∏–ø –∑–∞—è–≤–∫–∏:</b> ${typeName}\n`;
    }
    
    message += `\n`;
    
    if (formData.name) {
        message += `üë§ <b>–Ü–º'—è:</b> ${formData.name}\n`;
    }
    
    if (formData.phone) {
        message += `üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${formData.phone}\n`;
    }
    
    if (formData.field) {
        message += `üìù <b>–î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:</b> ${formData.field}\n`;
    }
    
    message += `\nüåê <b>–°—Ç–æ—Ä—ñ–Ω–∫–∞:</b> ${window.location.href}`;
    
    if (Object.keys(utmParams).length > 0) {
        message += `\n\nüìä <b>UTM –º—ñ—Ç–∫–∏:</b>\n`;
        
        Object.entries(utmParams).forEach(([key, value]) => {
            const displayName = key.replace('utm_', '').replace('_', ' ');
            message += `‚Ä¢ <b>${displayName}:</b> ${value}\n`;
        });
    }
    
    return message;
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–±–æ—Ä—É –¥–∞–Ω–∏—Ö –∑ —Ñ–æ—Ä–º–∏
function collectFormData(form) {
    const formData = {};
    
    const nameField = form.querySelector('#name, input[name="name"], input[type="text"]');
    const phoneField = form.querySelector('#Phone-2, #phone, input[name="phone"], input[type="tel"]');
    const fieldField = form.querySelector('#field, textarea, input[name="message"]');
    
    if (nameField && nameField.value.trim()) {
        formData.name = nameField.value.trim();
    }
    
    if (phoneField && phoneField.value.trim()) {
        formData.phone = phoneField.value.trim();
    }
    
    if (fieldField && fieldField.value.trim()) {
        formData.field = fieldField.value.trim();
    }

    const formId = form.id;
    if (formId === 'wf-form-free' || 
        form.classList.contains('forma-free') ||
        form.classList.contains('wf-form-free') ||
        form.dataset.formType === 'free' ||
        form.dataset.formType === 'trial') {
        formData.formType = 'trial';
    } else {
        formData.formType = 'general';
    }
    
    console.log('–ó—ñ–±—Ä–∞–Ω—ñ –¥–∞–Ω—ñ —Ñ–æ—Ä–º–∏:', formData);
    return formData;
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó —Ñ–æ—Ä–º–∏
function validateForm(formData) {
    if (!formData.name && !formData.phone) {
        return false;
    }
    return true;
}

// –ì–û–õ–û–í–ù–ê –ó–ú–Ü–ù–ê: –ù–æ–≤–∏–π –ø—ñ–¥—Ö—ñ–¥ –¥–æ –æ–±—Ä–æ–±–∫–∏ —Ñ–æ—Ä–º–∏
async function handleFormSubmit(event) {
    const form = event.target;
    if (!form) return;
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ñ–æ—Ä–º–∞ –≤–∂–µ –±—É–ª–∞ –æ–±—Ä–æ–±–ª–µ–Ω–∞
    if (form.dataset.telegramProcessing === 'true') {
        return; // –î–æ–∑–≤–æ–ª—è—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É –≤—ñ–¥–ø—Ä–∞–≤–∫—É
    }
    
    // –ó–±–∏—Ä–∞—î–º–æ –¥–∞–Ω—ñ –ë–ï–ó –±–ª–æ–∫—É–≤–∞–Ω–Ω—è —Ñ–æ—Ä–º–∏
    const formData = collectFormData(form);
    
    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è
    if (!validateForm(formData)) {
        event.preventDefault(); // –ë–ª–æ–∫—É—î–º–æ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –Ω–µ–≤–∞–ª—ñ–¥–Ω–∞
        showNotification('–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ø–æ–≤–Ω—ñ—Ç—å –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è', 'error');
        return;
    }
    
    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ action —Ñ–æ—Ä–º–∏ –¥–ª—è —Ä–µ–¥—ñ—Ä–µ–∫—Ç—É (—è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ fallback)
    const formAction = form.getAttribute('action');
    const formRedirect = form.dataset.redirect || form.getAttribute('data-redirect');
    
    // –ú–∞—Ä–∫—É—î–º–æ —â–æ —Ñ–æ—Ä–º–∞ –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è
    form.dataset.telegramProcessing = 'true';
    
    // –í–∏–∑–Ω–∞—á–∞—î–º–æ Thread ID
    const threadId = getThreadId(form);
    
    // –í–ê–ñ–õ–ò–í–û: –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤ Telegram –ê–°–ò–ù–•–†–û–ù–ù–û –±–µ–∑ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è
    sendToTelegram(formData, threadId)
        .then(success => {
            if (success) {
                console.log('‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram');
                showNotification('–ó–∞—è–≤–∫–∞ —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞!', 'success');
            } else {
                console.log('‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤ Telegram, –∞–ª–µ —Ñ–æ—Ä–º–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞');
            }
        })
        .catch(error => {
            console.error('–ü–æ–º–∏–ª–∫–∞:', error);
        })
        .finally(() => {
            // –û—á–∏—â–∞—î–º–æ —Ñ–ª–∞–≥ –ø—ñ—Å–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏
            setTimeout(() => {
                form.dataset.telegramProcessing = 'false';
            }, 1000);
        });
    
    // –ù–ï –±–ª–æ–∫—É—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É –≤—ñ–¥–ø—Ä–∞–≤–∫—É —Ñ–æ—Ä–º–∏ Webflow
    // –§–æ—Ä–º–∞ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç—å —Å–≤–æ—é —Ä–æ–±–æ—Ç—É —ñ –≤–∏–∫–æ–Ω–∞—î —Ä–µ–¥—ñ—Ä–µ–∫—Ç
}

// –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π –º–µ—Ç–æ–¥ –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º Webflow –ø–æ–¥—ñ–π
function initWebflowIntegration() {
    // –Ø–∫—â–æ —î Webflow –æ–±'—î–∫—Ç
    if (window.Webflow) {
        window.Webflow.push(function() {
            // –ü–µ—Ä–µ—Ö–æ–ø–ª—é—î–º–æ —É—Å–ø—ñ—à–Ω—É –≤—ñ–¥–ø—Ä–∞–≤–∫—É —Ñ–æ—Ä–º–∏
            $(document).on('submit', 'form', function(e) {
                const form = this;
                
                // –ó–±–∏—Ä–∞—î–º–æ –¥–∞–Ω—ñ –±–µ–∑ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è
                const formData = collectFormData(form);
                if (!validateForm(formData)) return;
                
                const threadId = getThreadId(form);
                
                // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤ Telegram –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ
                sendToTelegram(formData, threadId).catch(console.error);
            });
        });
    }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–±–µ–∑–ø–µ—á–µ–Ω–Ω—è —Ä–µ–¥—ñ—Ä–µ–∫—Ç—É (fallback)
function ensureRedirect(form) {
    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π redirect URL –∑ –∞—Ç—Ä–∏–±—É—Ç—ñ–≤ Webflow
    const redirectUrl = form.getAttribute('data-redirect') || 
                       form.querySelector('[data-redirect]')?.getAttribute('data-redirect');
    
    if (redirectUrl) {
        // –î–æ–¥–∞—î–º–æ fallback —Ä–µ–¥—ñ—Ä–µ–∫—Ç —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥–∏
        setTimeout(() => {
            if (window.location.href === document.URL) {
                console.log('Fallback redirect to:', redirectUrl);
                window.location.href = redirectUrl;
            }
        }, 3000);
    }
}

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏
document.addEventListener('DOMContentLoaded', function() {
    console.log('üöÄ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Telegram Form Sender');
    
    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ Webflow —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—é
    initWebflowIntegration();
    
    // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—Å—ñ —Ñ–æ—Ä–º–∏
    const forms = document.querySelectorAll('form');
    console.log(`–ó–Ω–∞–π–¥–µ–Ω–æ —Ñ–æ—Ä–º: ${forms.length}`);
    
    forms.forEach(form => {
        // –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏
        form.removeEventListener('submit', handleFormSubmit);
        
        // –î–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –∑ –≤–∏—Å–æ–∫–∏–º –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–æ–º
        form.addEventListener('submit', handleFormSubmit, false);
        
        // –î–æ–¥–∞—î–º–æ fallback –¥–ª—è —Ä–µ–¥—ñ—Ä–µ–∫—Ç—É
        form.addEventListener('submit', function() {
            ensureRedirect(form);
        });
        
        const threadId = getThreadId(form);
        const threadName = threadId === TELEGRAM_CONFIG.threads.trial_lesson ? 
            '–ó–∞—è–≤–∫–∏ –Ω–∞ –ø—Ä–æ–±–Ω–∏–π —É—Ä–æ–∫' : '–û—Å–Ω–æ–≤–Ω–∏–π —á–∞—Ç';
        
        console.log(`‚úÖ –§–æ—Ä–º–∞ "${form.id || '–±–µ–∑ ID'}" –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∞ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤: ${threadName}`);
    });
});

// –î–æ–¥–∞—î–º–æ —Å—Ç–∏–ª—ñ –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
const style = document.createElement('style');
style.textContent = `
    .notification {
        position: fixed;
        top: 20px;
        right: 20px;
        padding: 15px 20px;
        border-radius: 5px;
        color: white;
        font-weight: 500;
        opacity: 0;
        transition: opacity 0.3s;
        z-index: 10000;
    }
    .notification.show {
        opacity: 1;
    }
    .notification.success {
        background-color: #4CAF50;
    }
    .notification.error {
        background-color: #f44336;
    }
`;
document.head.appendChild(style);

// API –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è (–±–µ–∑ –∑–º—ñ–Ω)
window.TelegramFormSender = {
    testTrialForm: async function() {
        console.log('üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤ –≥—ñ–ª–∫—É "–ó–∞—è–≤–∫–∏ –Ω–∞ –ø—Ä–æ–±–Ω–∏–π —É—Ä–æ–∫"');
        const testData = {
            name: '–¢–µ—Å—Ç –ü—Ä–æ–±–Ω–∏–π –£—Ä–æ–∫',
            phone: '+380123456789',
            field: '–¢–µ—Å—Ç —Ñ–æ—Ä–º–∏ –ø—Ä–æ–±–Ω–æ–≥–æ —É—Ä–æ–∫—É',
            formType: 'trial'
        };
        
        const success = await sendToTelegram(testData, TELEGRAM_CONFIG.threads.trial_lesson);
        if (success) {
            console.log('‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–±–Ω–æ–≥–æ —É—Ä–æ–∫—É –ø—Ä–æ–π—à–æ–≤ —É—Å–ø—ñ—à–Ω–æ!');
            showNotification('–¢–µ—Å—Ç –ø—Ä–æ–±–Ω–æ–≥–æ —É—Ä–æ–∫—É —É—Å–ø—ñ—à–Ω–∏–π!', 'success');
        } else {
            console.log('‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–±–Ω–æ–≥–æ —É—Ä–æ–∫—É');
            showNotification('–ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É –ø—Ä–æ–±–Ω–æ–≥–æ —É—Ä–æ–∫—É', 'error');
        }
    },
    
    showForms: function() {
        const forms = document.querySelectorAll('form');
        console.log(`üìù –ó–Ω–∞–π–¥–µ–Ω–æ ${forms.length} —Ñ–æ—Ä–º –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ:`);
        forms.forEach((form, index) => {
            const threadId = getThreadId(form);
            const threadName = threadId === TELEGRAM_CONFIG.threads.trial_lesson ? 
                '–ó–∞—è–≤–∫–∏ –Ω–∞ –ø—Ä–æ–±–Ω–∏–π —É—Ä–æ–∫' : '–û—Å–Ω–æ–≤–Ω–∏–π —á–∞—Ç';
            const redirectUrl = form.getAttribute('data-redirect');
            console.log(`${index + 1}. ID: "${form.id || '–Ω–µ–º–∞—î'}", Redirect: "${redirectUrl || '–Ω–µ–º–∞—î'}", –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –≤: ${threadName}`);
        });
    }
};
